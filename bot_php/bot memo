lesson 1
bot_php
て、これから何回かに分けて PHP でツイッターボットを作る方法を見ていきましょう。
今回はその完成版の確認と、必要となる知識、それからレッスンにおける環境、それからレッスンを進めるにあたって必要となる準備について触れていきます。
まず完成版なのですが、こちらのブラウザで見ていきましょう。
今回は dotinstall_bot というアカウントを取ったので、そちらで定期的につぶやくというのをやっていきます。
ドットインストールらしく、おすすめのレッスンをこのようにハッシュタグとか画像付きでつぶやくやり方について見ていきたいと思います。
必要となる知識なのですが、この動画の下にある補足情報にまとめておきました。
レッスンを始める前にざっと眺めておいてください。
それからレッスンにおける環境なのですが…、常時稼働するようなボットを作るにはレンタルサーバーなんかを借りてそちらで動かすべきなのですが、今回は作り方の練習なのでローカル開発環境にて開発していきましょう。
ちょっと状況を見ておくと、vagrant ユーザーで今 CentOS が立ち上がっていて、bot_php というディレクトリを作っておいたので、こちらでファイルを作っていろいろやっていきましょう。
それから、ボットを作るにあたってツイッターを操作するための API というものへアクセスするのですが、ローカル開発環境の時刻がずれているとエラーになってしまうので、date コマンドで確認して、ちゃんと現在時刻になっているかを見ておくと良いでしょう。
ハマりやすいポイントなので、気をつけておいてください。
それから必要となる準備なのですが、当然の事ながらツイッターアカウントが必要になりますので、今お持ちのものを使うか、新しく取得しておいて下さい。
今回は dotinstall_bot を使っていきます。
後で見ていくのですが、開発者サイトでアプリを登録するには更にこのアカウントに対して電話番号の登録が必要になってきます。
電話番号の登録ですが、こちらの設定画面に行って…、そしてモバイルのところで設定できるのでやっておいてください。
今は現在設定してあるので、もう既に電話番号が表示されていますが、そうでない場合はこのあたりに手順が出てくるので、その手順に従ってやってみてください。
今ちょっとセキュリティ上、伏せ字にしておきましたが、ご自身の電話番号が確認できれば OK かと思います。
というわけで、では続きは次回以降やっていきましょう。


lesson 2
さて、続きをやっていきましょう。
0:05
ツイッターボットを作るには、まずツイッターの開発者サイトでアプリを登録しないといけないので、そのあたりを今回やっていきます。
0:11
用意したアカウントでログインした後にホームに行くと開発者サイト用のリンクがこのあたりにあるのでそちらから進むか、もしくは直接 dev.twitter.com に行っても良いかと思います。
0:23
開発者用のサイトはちょくちょくインターフェイスが変わったりしますが、アプリの登録は下の方のリンクから行けるはずです。
0:31
「Manage Your Apps」をクリックしていただくか、もしくは直接 apps.twitter.com に行っても良いかと思います。
0:37
そこで新しくアプリを作るためのボタンがあるので、こちらで進んでいきましょう。
0:43
今回、名前を付けたいので…、では DotinstallBot2015 といった適当な名前にしておきましょう。
0:51
日本語でも OK です。
0:53
Description は説明なので、適当に説明を書いておいて下さい。
0:58
Website は URL を入れておけば OK ですね。
1:02
今回 Callback URL は使わないので、ここは空欄で OK です。
1:08
後は規約に agree するかと言われるので、Yes としてあげて、アプリを作るためのボタンをクリックしてあげて下さい。
1:17
そうすると、このようなアプリの管理画面に飛ぶので、この辺りで必要な情報を取得しておきましょう。
1:27
一応確認しておいていただきたいのが、こちらの Access level ですね。
1:31
今回、アカウントに対してつぶやきを書き込んでいくので、ちゃんと Read and write になっているのを確認しておいて下さい。
1:38
それからツイッターボットをプログラムの方からコントロールしていくにあたって、キーが必要になってくるので、それをちょっとコピペしておきましょう。
1:49
必要となるものが 4 つあるのですが、まず Consumer Key ですね。
1:54
これをでは適当にエディターの方にコピーしておきましょう。
1:59
それから Consumer Key の Consumer Secret、こちらも必要になるので…、これもコピーしておいてください。
2:07
それからもう 1 つ、Access Token が必要になるので、Access Token を作っておきましょう。
2:14
こちらで進めていって下さい。
2:17
そうすると下の方に出てくるので、この Access Token と、 Access Token Secret もコピーしておいて下さい。
2:28
そこまでできたら、プログラムを作る準備ができたので、では続きは次回にしていきたいと思います。


lesson 3
さて、続きをやっていきましょう。
0:06
ツイッターボットを扱うためのこれらのキーが取得できたので、それらを読み込むところまでプログラムを作っていきたいと思います。
0:14
では、今ファイル転送ツールでローカル開発環境の bot_php にいるので、そちらにファイルを作っていきましょう。
0:23
今回は、bot.php を動かして、つぶやくようにしたいと思います。
0:30
こちらの方では、いろいろやっていきたいのですが…、まずは設定を読み込んでおきたいと思います。
0:36
設定は別ファイルにしておくと良いかと思うので、require_once() としてあげて、今のディレクトリはこちらの定義済み定数で取れるので、それに対して config.php を連結して、こちらのファイルを読み込んであげましょう。
0:55
config.php を作っていきたいので、こちらで新しくファイルを作っていってあげます。
1:03
では、このようにしてあげて…、こちらの方で先程のキーを define() しておきましょう。
1:10
最初が CONSUMER_KEY だったので、それを定義しておきたいのと、後は CONSUMER_SECRET ですね。
1:22
それから、ACCESS_TOKEN、ACCESS_TOKEN_SECRET なので、それぞれコピーしておきましょう。
1:36
CONSUMER_KEY はこちらなので、このようにしてあげて…、CONSUMER_SECRET はこうなので、このようにしてあげましょう。
1:46
ACCESS_TOKEN もコピーしてあげつつ…、ACCESS_TOKEN_SECRET の方もコピーしてあげましょう。
1:55
なお、当然の事ながらこれらのキーは他の人に知られないようにしてあげて下さい。
2:02
もし、知られてしまった場合は開発者サイトで再発行もできますので、そちらも憶えておくと良いでしょう。
2:09
せっかくなのでついでに見ておきましょう。
2:10
もし、誰かに知られてしまっただとか、そういうおそれがある時は、こちらの「Regenerate My Access Token …」で、Access Token を再生成したりとか、もしくは禁止したりすることができたりします。
2:23
アプリケーションの Consumer Key に関しても、こちらで同じようなことができるので、それも憶えておくと良いのではないでしょうか。
2:31
といったところで、キーの読み込みまでができたので、では続きは次回以降やっていきましょう。


lesson 4
さて、続きをやっていきましょう。
0:05
PHP からツイッターを操作するためには、いろいろな複雑な処理を書かなくてはいけないのですが、その辺りを簡単にしてくれるパッケージと呼ばれる便利なプログラムがあるので、そちらを導入していきましょう。
0:19
最近の PHP だと、パッケージの導入には Composer というパッケージ管理ツールを使うので、まずはそちらを導入していきたいと思います。
0:29
では composer を検索していきましょう。
0:33
そうすると…、こちらにあるので、この getcomposer.org にアクセスしてみてください。
0:40
インストールの仕方は「Getting Started」に書いてあるので、こちらにあるコマンドを実行してあげれば OK でしょう。
0:49
では、これをコピーしてあげて…、今回の作業ディレクトリの bot_php で実行してあげて下さい。
0:55
ちょっと時間がかかりますが、これで導入がされるはずです。
0:59
終わったあたりから…、と思ったらもう終わってますね。
1:03
うまくいったかと思うので、ではこれを使っていきましょう。
1:07
composer を使ってインストールできる定番パッケージは packagist というサイトで見つけることができるので、そちらにもアクセスしてツイッターの API を操作するためのパッケージを探してみましょう。
1:25
twitter で検索してあげて…、お気に入り順でソートするには、この星印をクリックしてあげると良いのでこれで見ていきます。
1:32
いろいろ並んでいますが、今回使いたいのはこの twitteroauth なので、こちらをクリックしてあげましょう。
1:39
使い方はホームページに載っているので、こちらをクリックしていってあげます。
1:45
そうするとインストールの仕方が出ているので、この通りに進めていきましょう。
1:49
composer コマンドを使って require abraham/twitteroauth しなさいと言われているので、そのようにしてあげます。
1:55
この composer コマンドなのですが…、こちらにもありますが、「php composer.phar」を使いなさいと言われているので、まずこう書いた後に require abraham/twitteroauth してあげましょう。
2:07
ではこちらをコピーしてあげて、こうしてあげて…、リターンを押してあげると、色々なものがインストールされるはずです。
2:15
これはちょっと時間がかかるので、終わったあたりから再開していきます。
2:23
さて、ちょっと時間がかかったようですが終わったようですね。
2:26
ちなみに今どんなファイルができたかというと、こちらのファイル転送ツールで確認してみましょう。
2:33
この辺りは composer 関係のファイルなのですが、こちらの vendor に今導入したパッケージが入っているのが分かるかと思います。
2:42
次回以降、こちらに入っているこの TwitterOAuth を色々使っていきたいと思います。


lesson 5
さて、続きをやっていきましょう。
0:04
前回導入した TwitterOAuth を使っていきたいと思います。
0:08
composer で導入したパッケージは、vendor ディレクトリの下の autoload.php を読み込むことで読み込んでくれるので、そのあたりの設定をした後に色々使っていきたいと思います。
0:20
ではどうするかというと、config.php の方で読み込んでいけば OK でしょう。
0:25
では require_once() としてあげて、現在のディレクトリの下の /vendor/autoload.php とすれば OK です。
0:40
実際に TwitterOAuth を使うには、TwitterOAuth のサイトでそのあたりが書いてあるので少し見ていきましょう。
0:48
require はもうしたので良いですね。
0:50
名前空間がこちらになるのですが、少し長いので use を使ってあげて、この名前空間を TwitterOAuth で呼べるようにしてあげましょう。
1:00
ではそのあたりも書いてあげて…、そして次に何をするかというと、Twitter の API にとりあえず接続するにはこちらの命令を使ってあげれば OK です。
1:09
その後、テストでそのアカウントの情報を引っ張ってくるための、こちらの命令もちょっと実行してあげましょう。
1:18
ではこちらでいってあげて、このようにしてあげて…、今回 CONSUMER_KEY、CONSUMER_SECRET、それからアクセストークンなどを読み込んでいきたいのですが、アクセストークンは大文字の定数にしたので、ACCESS_TOKENとしてあげて、そして ACCESS_TOKEN_SECRET はこちらで OK ですね。
1:40
これで、Twitter の API にアクセスできるようになったはずです。
1:46
その後に、account/verify_credentials で @dotinstall_bot の情報が取れるはずなので、これをとりあえず var_dump してあげて上手く行っているかを見てあげましょう。
1:59
これを実行する方法なのですが、コマンドラインから実行していけば OK ですね。
2:06
コマンドとしては「php bot.php」でファイルの名前を指定してあげれば OK なので、これで OK でしょう。
2:13
ただ、今回出力される内容がすごく多くなるかと思うので、パイプを使ってあげて more としてあげて、一画面ずつに分割してあげましょう。
2:20
そうすると…、こうですね。
2:23
ちゃんと取れているのが分かるかと思います。
2:25
アカウントの ID が 433174075 で、名前がちゃんと Dotinstall Bot となっていて、screen_name も dotinstall_bot となっているので、上手くいっているかと思います。
2:33
こういった形で簡単に OAuth をセットアップすることができて、一行だけで色々な命令が使えたりするので…、では次回以降つぶやきをしてみるというのをやっていきましょう。


lesson 6
さて、では実際につぶやいてみたいのですが、その前にどういった命令が使えるかを開発者サイトの方で確認しておきましょう。
0:11
どこにあるかというと…、開発者サイトに行けば良いので dev.twitter.com にアクセスしてあげてください。
0:18
Developers の Documentation にドキュメントがあります。
0:22
TwitterOAuth でアクセスできる命令は REST APIs にあるので、こちらをクリックしてあげましょう。
0:29
そうすると、色々な命令がこちらに並んでいます。
0:32
statuses はつぶやきに関するもの、他にも DM に関するものだとか、フォロワーに関するものだとか、色々あるので興味がある人はざっと眺めてみると良いでしょう。
0:42
前回見た verify_credentials はこちらになっていて、色々英語で書いてありますが、アカウントの情報が取得できますよと書いてあります。
0:53
せっかくなので 1 つ試してみましょう。
0:55
では、今回 GET statuses/home_timeline を使って、現在のつぶやきを取得してみたいと思います。
1:00
ここで重要になるのが、命令の形式ですね。
1:04
こちらの形式は GET か POST があるのでこれをまず覚えておいて、その後に命令の名前を使いますのでそれも覚えておきましょう。
1:14
では、これを使うためにどうしたら良いのかをこちらのプログラムの方で見ていきます。
1:20
どうするかというと…、まず命令の形式を指定してあげます。
1:23
命令の形式は GET か POST なのですが、今回は GET なのでこのままで良いでしょう。
1:27
命令の名前をこちらに与えてあげたいので、これをコピーしてそのまま貼り付けてあげれば OK でしょう。
1:35
命令によってはパラメータというオプションをつけることができたりします。
1:40
今回の GET statuses/home_timeline の場合だと下の方にパラメータの一覧があって…、例えば件数を指定できたりだとか、どの ID から始めるかを指定できたりします。
1:51
今回、大したつぶやきの数はないのですが…、ではカウントを使って 3 件だけ引っ張ってきたいという場合にどう書くかを見てあげましょう。
1:59
とは言っても簡単で、こちらの命令の第二引数に配列で与えてあげるだけです。
2:05
どうするかというと、count で…、値を例えば 3 と与えてあげます。
2:11
では、今回これでつぶやきが取れるかを見てあげましょう。
2:15
では、コマンドラインの方で前回と同じような命令を打ってあげます。
2:21
これで OK かな。
2:23
こうしてあげると、今回つぶやきが 1 件だけしかないので 1 つしか取れていませんが、ちゃんとこのようなつぶやきが取れているのが分かるかと思います。
2:33
こういった具合に REST APIs の命令を上手く探し当てて、それを TwitterOAuth のこういった命令にちゃんと変換できるようにしておくと良いかと思います。
2:47
といったところで、では続きは次回にしていきましょう。


lesson 7
さて、ではいよいよつぶやいてみたいと思います。
0:05
つぶやくための命令を少し確認していきましょう。
0:08
では何を使うかなのですが…、POST statuses/update を使ってあげれば OK です。
0:14
命令の形式が POST で命令の名前が statuses/update、そしてつぶやきの内容がパラメータの status で指定できるので、では命令を組み立てていきましょう。
0:24
どうするかなのですが…、このあたりを使っていけば OK ですね。
0:28
今回レスポンスが返ってくるという意味で $res という変数にしてあげて、このようにしてあげましょう。
0:35
命令の形式は POST ですね。
0:37
命令の名前が statuses/update なので、コピーしてあげたいと思います。
0:44
これで OK ですね。
0:46
つぶやきの内容ですが、配列で指定してあげれば良いのでこうしてあげましょう。
0:50
status としてあげて…、今回適当に「ドットインストールがおすすめ!」としてあげましょう。
1:00
URL とかハッシュタグはそのままつければ良いので、このようにしてあげたいと思います。
1:08
その後にこの処理がうまくいったかどうかを判定してあげましょう。
1:12
そのためのやり方なのですが、TwitterOAuth のサイトに書いてあるのでそちらを見ていきます。
1:18
Error handling のところなので、このあたりを見ていけば OK ですね。
1:25
上手くいったかどうかは、この条件分岐を使えば良いのでこれをそのままコピーしてあげます。
1:30
では、このあたりに書いていきましょう。
1:32
演算子は厳密にしておきたいと思います。
1:34
上手くいった場合は単に Success! と表示させてみましょう。
1:42
コマンドラインなので改行をつけたいのですが、システムに応じた改行を付与したい場合はこの定数が用意されているので、PHP_EOL を使ってあげます。
1:51
上手くいかなかった場合は Error! と表示してあげて、エラーメッセージは $res の中に入ってくるので、それもくっつけてあげるとさらに親切でしょう。
2:04
「$res->errors[0]->message」に入ってくるので、このようにしてあげます。
2:11
では、ここまでで上手くいったかと思うので、実行してあげましょう。
2:14
どうするかというと…、こちらのコマンドラインの方からやれば OK ですね。
2:18
「php bot.php」としてあげます。
2:20
そうすると Success! となったので上手くいっているはずです。
2:24
では、少し見てあげましょう。
2:25
twitter.com にいってあげると @dotinstall_bot になっていて、ちゃんと先ほどのつぶやきが出てくるはずです。
2:37
こうですね。
2:39
「ドットインストールがおすすめ」で、URL とハッシュタグがついています。
2:42
簡単ではありましたが、このようにつぶやくことができるのでやり方として慣れておいてください。


lesson 8
さて、次は画像付きでつぶやいてみる、というのをやってあげましょう。
0:09
そのためにまず画像が必要なので…、今回 HTML のレッスンをおすすめしたいので、html_lesson.png を用意しておきました。
0:15
こちらをローカル開発環境にまずはアップロードしておきましょう。
0:20
では、このようにしてあげます。
0:23
これで上手くいきましたね。
0:25
つぶやきの方なのですが、画像付きの場合はまず画像をアップロードしてその後につぶやく、という流れになっています。
0:32
アップロードするための命令ですが、POST media/upload を使うことになっています。
0:39
命令の処理なのですが、POST になっていますが TwitterOAuth を使う場合には upload という命令を使うので、後で気をつけておいてください。
0:48
パラメータの方は media があるので、こちらでファイル名を渡してあげれば OK です。
0:53
ではやっていきましょう。
0:55
ではどうするかというと…、まずアップロードしたいので $media としてあげて、今回 post ではなくて upload を使ってあげます。
1:07
こちらの命令をそのまま書けば良いのでこのようにしてあげて…、パラメータの方は media を渡せばいいので…、media でファイル名を渡してあげましょう。
1:18
現在のディレクトリに /html_lesson.png を渡してあげれば OK ですね。
1:26
これで OK かな。
1:29
ここまでできたら後はつぶやきたいので、このあたりを書いていきましょう。
1:34
せっかくなので PHP の命令も入れ込んでいってみましょう。
1:37
「date('m月d日') . 'はHTML入門がおすすめです!」と書いていってあげましょう。
1:55
URL の方なのですが、http://dotinstall.com/lessons/basic_html_v3 なので、このようにしてあげましょう。
2:02
メディアをくっつけたい場合は media_ids というパラメータになるので、こちらに $media で返ってきた media_id をくっつけてあげれば OK かと思います。
2:19
これで OK かな。
2:21
できたかと思うので、では実行していきましょう。
2:23
「php bot.php」で OK ですね。
2:26
こうしてあげると Success! と出たので…、では Twitter の方で確認していきます。
2:33
これで見てあげると…、こうですね。
2:37
ちゃんと日付も入っていますし、思った通りに画像付きでツイートできているのが分かるかと思います。
2:44
こういった画像付きのツイートの仕方にも慣れておくと良いでしょう。


lesson 9
さて、つぶやく方法が終わったので、次は定期的に bot.php を実行するように設定してみましょう。
0:09
いろんなやり方があるのですが、cron と呼ばれる命令を使っていきたいと思います。
0:15
命令自体は「crontab -l」で現在の設定を確認できて、「crontab -e」で設定を編集できたりします。
0:23
書式なのですが後で詳しく見ていきますが、min hour day month youbi（※ 0 もしくは 7 が日曜日で、1 が月曜日、2 が火曜日…）といった具合になります。
0:41
その後に command を実行すれば OK です。
0:42
例えば毎朝 7 時に実行したい場合は、「0 7 * * *」（毎日は * で指定可能）としてあげて command を打ってあげれば OK ですね。
0:56
今回 PHP で bot.php を実行したいので、この command を先に調べておきましょう。
1:02
絶対パスで指定したほうが良いので、PHP はどれを使っているかというと…、「which php」で調べられるので、こちらの /usr/bin/php を使ってあげましょう。
1:13
bot.php 自体は /home/vagrant/bot_php にあるので、その後につなげてあげれば OK ですね。
1:20
今何分かというと 8:47 なので 8:50 に実行するように設定してみましょう。
1:30
では、このようにすれば OK でしょう。
1:33
こちらをちょっとコピーしておいてあげて、「crontab -e」 でこちらの設定を書き込んであげます。
1:42
こうしてあげると、システムが設定したエディタが立ち上がってくれます。
1:48
今回 vi が立ち上がるので、そちらで編集していきましょう。
1:50
vi の使い方は他のレッスンを参考にしてみてください。
1:54
これでできたので保存してあげて「crontab -l」とすると…、こうですね。
2:02
ちゃんと 8:50 にこちらが実行されるように設定されています。
2:05
これが実行されるまで少し待ちたいのですが、よくよく考えると前回のつぶやきと区別がつかないので、少し分かりやすいように (by cron) とこちらの方に書いてあげましょう。
2:20
これで OK かな。
2:21
こうしてあげると、8:50 に (by cron) とついたつぶやきがアップされるはずです。
2:29
少し時間がかかりそうなので、終わったあたりから再開していきましょう。
2:36
さて少し時間が経ちましたが、8:50 になったようです。
2:40
Twitter の方を確認してあげるとちゃんと新着ツイートが出てきていて、(by cron) の画像付きのツイートがつぶやかれているのが分かるかと思います。
2:48
cron の使い方はお使いの環境によって異なってもくるのですが、やり方として参考にしてみてください。
